import os, sys, glob

try:
  mitsubaPath = os.environ['MITSUBA_DIR']
except:
  print "You must set MITSUBA_DIR in your environment."
  print "Source setpath.sh from Mitsuba directory."
  sys.exit(1)

# Mitsuba configuration part
#
env = Environment()

env.AppendUnique(CPPDEFINES = 'SINGLE_PRECISION')
env.AppendUnique(CPPDEFINES = 'SPECTRUM_SAMPLES=3')

if sys.platform == 'posix' or sys.platform == 'linux2':
	env.AppendUnique(CCFLAGS = ['-g'])
	env.AppendUnique(CPPPATH = [os.path.join(mitsubaPath, 'include')])

	if os.path.exists('/usr/include/eigen3'):
		env.AppendUnique(CPPPATH = ['/usr/include/eigen3'])

	libpath = os.path.join(mitsubaPath, 'dist')
	env.AppendUnique(LIBPATH = [libpath])
	env.AppendUnique(LIBS = ['boost_filesystem', 'boost_system', 'boost_thread', 'mitsuba-core', 'mitsuba-render', 'mitsuba-hw'])
	env.AppendUnique(RPATH = libpath)
	#env.AppendUnique(LINKFLAGS = '-headerpad_max_install_names')

	env['SHLIBPREFIX']=''
	build = env.SharedLibrary('thunderloom', ['cloth.cpp'])
	
	install_path = Dir('../../../build/linux/mitsuba_plugin').abspath
	env.Install(install_path, build)
	env.Alias('release', install_path)

elif sys.platform == 'darwin':
	env.AppendUnique(CCFLAGS = ['-g', '-arch', 'x86_64', '-std=c++11', '-stdlib=libstdc++', '-mmacosx-version-min=10.9'])
	env.AppendUnique(CPPPATH = [os.path.join(mitsubaPath, 'Mitsuba.app/Headers/include')])
	env.AppendUnique(CPPPATH = [os.path.join(mitsubaPath, 'dependencies/include')])

	libpath = os.path.join(mitsubaPath, 'Mitsuba.app/Contents/Frameworks/')
	env.AppendUnique(LIBPATH = [libpath])
	env.AppendUnique(LIBS = ['boost_filesystem', 'boost_system', 'boost_thread', 'mitsuba-core', 'mitsuba-render', 'mitsuba-hw'])
	env.AppendUnique(RPATH = libpath)
	env.AppendUnique(LINKFLAGS = ['-arch', 'x86_64', '-mmacosx-version-min=10.9', '-headerpad_max_install_names', '-stdlib=libstdc++'])

	env['SHLIBPREFIX']=''
	build = env.SharedLibrary('thunderloom_mitsuba', ['cloth.cpp'])

	install_path = Dir('../../../build/macos/mitsuba_plugin').abspath
	print(install_path)
	env.Install(install_path, build)
	env.Alias('release', install_path)

else:

	print "<<ERROR>> There is no compilation toolchain for your system."
	sys.exit(1)
